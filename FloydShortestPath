
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class FloydShortestPath
{
    /// <summary>
    /// 计算生成最短路径结果
    /// </summary>
    /// <param name="Graph">有向图</param>
    /// <returns>返回次序表和距离表</returns>
    public static (int[,], float[,]) Compute(float[,] Graph)
    {
        //初始化距离表和次序表
        int pointNum = Graph.GetLength(0); //定点数量
        float[,] distanceTable = (float[,])Graph.Clone();
        int[,] sequenceTable = new int[pointNum, pointNum];
        for (int i = 0; i < pointNum; i++)
        {
            for (int j = 0; j < pointNum; j++)
            {
                sequenceTable[i, j] = i;
            }
        }
        //计算最短距离
        for (int k = 0; k < pointNum; k++)
        {
            for (int i = 0; i < pointNum; i++)
            {
                for (int j = 0; j < pointNum; j++)
                {
                    float sumDistance = distanceTable[i, k] + distanceTable[k, j];
                    if (sumDistance < distanceTable[i, j])
                    {
                        distanceTable[i, j] = sumDistance;
                        sequenceTable[i, j] = sequenceTable[i, k];
                    }
                }
            }
        }
        return (sequenceTable, distanceTable);
    }
}
